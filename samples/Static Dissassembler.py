import pefile
import capstone

# Load target PE file
pe = pefile.PE("samples\ircbot.exe")
print('File Sectios:\n')
for section in pe.sections:
    print('Section Name: '+str(section.Name), '\t',
        'VAddress: '+str(hex(section.VirtualAddress)), '\t',
        'VMemSize: '+str(hex(section.Misc_VirtualSize)), '\t',
        'DataSize: '+str(section.SizeOfRawData))

print('Extracting imported libraries...')
for entry in pe.DIRECTORY_ENTRY_IMPORT:
    print(entry.dll)
    for function in entry.imports:
        print('\t', function.name)

# get the address of the program entry point from the program header
entrypoint = pe.OPTIONAL_HEADER.AddressOfEntryPoint
# compute memory address where the entry point will be loaded into memory
entrypoint_address = entrypoint+pe.OPTIONAL_HEADER.ImageBase
# get the binary code from the PE file object
binary_code = pe.get_memory_mapped_image()[entrypoint:entrypoint+100]
print('Binary: '+str(binary_code))
# initialize disassembler to disassemble 32 bit x86 binary code
disassembler = capstone.Cs(capstone.CS_ARCH_X86, capstone.CS_MODE_64)
# disassemble code
for instruction in disassembler.disasm(binary_code, entrypoint_address):
    print(instruction.mnemonic, instruction.op_str)